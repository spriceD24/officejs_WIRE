{"version":3,"file":"functions.js","mappings":"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","sources":["webpack://excel-custom-functions-js/./src/functions/functions.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* global console setInterval, clearInterval */\n\n/**\n * Add two numbers\n * @customfunction\n * @param {number} first First number\n * @param {number} second Second number\n * @returns {number} The sum of the two numbers.\n */\nfunction add(first, second) {\n  return first + second;\n}\n\n/**\n * Displays the current time once a second\n * @customfunction\n * @param {CustomFunctions.StreamingInvocation<string>} invocation Custom function invocation\n */\nfunction clock(invocation) {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time\n * @returns {string} String with the current time formatted for the current locale.\n */\nfunction currentTime() {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param {number} incrementBy Amount to increment\n * @param {CustomFunctions.StreamingInvocation<number>} invocation\n */\nfunction increment(incrementBy, invocation) {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param {string} message String to write.\n * @returns String to write.\n */\nfunction logMessage(message) {\n  console.log(message);\n\n  return message;\n}\n\n/**\n * This custom function sends a request to the server with text and number parameters, and an optional delay.\n * @customfunction\n * @param {string} text The input text.\n * @param {number} number The multiplier number.\n * @param {number} [delay] Optional delay in seconds before returning the result.\n * @returns {Promise<number|string>} The result from the API or an error message.\n */\nasync function UBSFIN(text, number, delay) {\n  try {\n    console.log(\"UBSFIN\");\n\n    // Construct the API URL with query parameters\n    let url = `http://localhost:5000/wire?text=${encodeURIComponent(text)}&number=${number}`;\n\n    // Add the delay parameter to the URL if provided and is a positive number\n    if (typeof delay !== 'undefined' && delay > 0) {\n      url += `&delay=${delay}`;\n    }\n\n    console.log(`Calling URL: ${url}`);\n\n    // Make the API request\n    const response = await fetch(url);\n\n    // Check if the response is ok (status 200)\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n\n    // Parse the JSON response\n    const data = await response.json();\n\n    // Return the result from the API\n    return data.result;\n  } catch (error) {\n    // Handle any errors\n    console.error(error);\n    return \"Error calling API\";\n  }\n}\n\n/**\n * This custom function returns \"Hello, World!\".\n * @customfunction\n * @returns A string that says \"Hello, World!\".\n */\nfunction HELLO() {\n  return \"Hello, World!\";\n}\n\n\n\n/**\n * @customfunction\n * @param {string[][]} texts Array of text inputs\n * @param {number[][]} numbers Array of number inputs\n * @param {number} [delay] Optional delay parameter\n * @returns {string[][]} Array of results\n */\nasync function UBSFINBATCH(texts, numbers, delay) {\n  try {\n    console.log(\"UBSFIN Batch\");\n    logtxt = '';\n    // Flatten the input arrays\n    const flatTexts = texts.flat();\n    const flatNumbers = numbers.flat();\n\n    // Construct the API URL with query parameters\n    let url = `http://localhost:5000/wire/batch`;\n\n    console.log(`Calling URL: ${url}`);\n\n    // Prepare the request body\n    const requestBody = {\n      inputs: flatTexts.map((text, index) => ({\n        text: text,\n        number: flatNumbers[index]\n      }))\n    };\n\n    // Add the delay parameter if provided and is a positive number\n    if (typeof delay !== 'undefined' && delay > 0) {\n      requestBody.delay = delay;\n    }\n    logtxt = JSON.stringify(requestBody)\n    // Make the API request\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      mode: 'cors',\n      body: JSON.stringify(requestBody)\n    });\n\n    // Check if the response is ok (status 200)\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n\n    // Parse the JSON response\n    const data = await response.json();\n\n    // Reshape the results to match the input shape\n    return reshapeResults(data.results, texts.length, texts[0].length);\n  } catch (error) {\n    // Log the full error object to the console\n    console.error('UBSFIN Error:', error);\n\n    // Prepare a detailed error message\n    let errorMessage = \"Error calling API: \";\n    if (error instanceof Error) {\n        errorMessage += `${error.name} - ${error.message}`;\n        if (error.stack) {\n            console.error('Stack trace:', error.stack);\n        }\n    } else {\n        errorMessage += String(error);\n    }\n\n    // If it's a network error, add more details\n    if (error instanceof TypeError && error.message.includes('network')) {\n        errorMessage += \" (Network error, check your connection)\";\n    }\n\n    // Log the error message\n    console.error(errorMessage);\n    errorMessage = errorMessage +', txt='+logtxt\n    // Return the error message for each cell in the input range\n    return texts.map(row => row.map(() => errorMessage));\n  }\n}\n\n// Helper function to reshape the flat array of results into a 2D array\nfunction reshapeResults(flatResults, rows, cols) {\n  const result = [];\n  for (let i = 0; i < rows; i++) {\n    result.push(flatResults.slice(i * cols, (i + 1) * cols));\n  }\n  return result;\n}\n\n// You must include this line to make the function available in Excel.\nCustomFunctions.associate(\"UBSFIN\", UBSFIN);\nCustomFunctions.associate(\"HELLO\", HELLO);\nCustomFunctions.associate(\"UBSFINBATCH\", UBSFINBATCH);\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);\nCustomFunctions.associate(\"UBSFIN\", UBSFIN);\nCustomFunctions.associate(\"HELLO\", HELLO);\nCustomFunctions.associate(\"UBSFINBATCH\", UBSFINBATCH);"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","UBSFIN","_x","_x2","_x3","_UBSFIN","_callee","text","number","delay","url","response","data","_context","console","log","concat","encodeURIComponent","fetch","ok","statusText","json","result","t0","error","HELLO","UBSFINBATCH","_x4","_x5","_x6","_UBSFINBATCH","_callee2","texts","numbers","flatTexts","flatNumbers","requestBody","errorMessage","_context2","logtxt","flat","inputs","map","index","JSON","stringify","headers","mode","body","reshapeResults","results","message","stack","String","includes","row","flatResults","rows","cols","CustomFunctions","associate","first","second","invocation","timer","setInterval","time","Date","toLocaleTimeString","setResult","onCanceled","clearInterval","incrementBy"],"sourceRoot":""}